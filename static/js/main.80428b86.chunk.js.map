{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","name","email","token","generated","event","target","value","this","setState","preventDefault","encodedString","btoa","style","backgroundColor","marginTop","padding","url","window","location","href","replace","results","RegExp","exec","decodeURIComponent","signed","signedName","signedEmail","getParameterByName","temp","atob","split","className","m","s","actions","closeIcon","revealIcon","textClassName","title","fontSize","label","password","minWidth","onChange","handleInputChange","error","validate","node","type","waves","onClick","handleSubmit","right","generateQRCode","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.80428b86.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\n\nimport QRCode from 'qrcode.react'\n\nimport { Card, CardPanel, Col, Row, TextInput, Button, Icon } from 'react-materialize'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      name: \"\",\n      email: \"\",\n      token: \"\",\n      generated: false\n    }\n  }\n\n  handleInputChange(event) {\n    const target = event.target\n    const value = target.value\n    const name = target.name\n\n    this.setState({\n      [name]: value\n    })\n  }\n\n  handleSubmit(event) {\n    event.preventDefault()\n    const { token, name, email } = this.state\n    if (token !== \"\" && name !== \"\" && email !== \"\") {\n      this.setState({\n        generated: true\n      })\n    }\n  }\n\n  generateQRCode() {\n    const { token, name, email } = this.state\n    const encodedString = btoa(token + \":\" + name + \":\" + email)\n    return (\n      <div style={{backgroundColor: `white`, marginTop: `50px`, padding: `10px 10px 0 10px`}}>\n        <QRCode value={`https://mdzkm.github.io/qr-attendance?key=${encodedString}`} />\n      </div>\n    )\n  }\n\n  getParameterByName(name) {\n    let url = typeof window !== \"undefined\" && window.location.href\n    name = name.replace(/[\\[\\]]/g, \"\\\\$&\")\n    let regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n      results = regex.exec(url)\n    if (!results) return null\n    if (!results[2]) return \"\"\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"))\n  }  \n\n  render() {\n    const { token, name, email, generated } = this.state\n\n    var signed = false\n\n    var signedName = \"\"\n    var signedEmail = \"\"\n\n    if (this.getParameterByName(\"key\") !== null && this.getParameterByName(\"key\") !== \"\") {\n      var temp = atob(this.getParameterByName(\"key\"))\n      temp = temp.split(\":\")\n      signedName = temp[1]\n      signedEmail = temp[2]\n      \n      signed = true\n    }\n\n    return (\n      <div className=\"App App-header\">\n        {signed ? \n          <Row>\n            <Col\n              m={6}\n              s={12}\n            >\n              <Card\n                actions={[\n                  <a href=\"https://mdzkm.github.io/qr-attendance\">Return to home</a>\n                ]}\n                className=\"blue-grey darken-1\"\n                closeIcon={<Icon>close</Icon>}\n                revealIcon={<Icon>more_vert</Icon>}\n                textClassName=\"white-text\"\n                title=\"Your attendance has been recorded\"\n              >\n                Name: {signedName}\n                Email: {signedEmail}\n              </Card>\n            </Col>\n          </Row> :\n          <>\n            <Row>\n              <Col\n                m={12}\n                s={12}\n              >\n                <CardPanel className=\"teal\" style={{ fontSize: `18px` }}>\n                  <span className=\"white-text\">\n                    Enter your token, name, and email in the input boxes below to unlock today's attendance QR code!\n                  </span>\n                </CardPanel>\n              </Col>\n            </Row>\n            <TextInput\n              label=\"Token\"\n              name=\"token\"\n              password\n              className=\"white-text\"\n              value={token}\n              style={{ minWidth: `25vw` }}\n              onChange={event => this.handleInputChange(event)}\n            />\n            <TextInput\n              label=\"Name\"\n              name=\"name\"\n              className=\"white-text\"\n              value={name}\n              style={{ minWidth: `25vw` }}\n              onChange={event => this.handleInputChange(event)}\n            />\n            <TextInput\n              email\n              name=\"email\"\n              error=\"Enter a valid email address!\"\n              label=\"Email\"\n              validate\n              className=\"white-text\"\n              value={email}\n              style={{ minWidth: `25vw` }}\n              onChange={event => this.handleInputChange(event)}\n            />\n            <Button\n              node=\"button\"\n              type=\"submit\"\n              waves=\"light\"\n              style={{ marginTop: `10px` }}\n              onClick={event => this.handleSubmit(event)}\n            >\n              Generate\n              <Icon right>\n                image\n              </Icon>\n            </Button>\n            { generated ? this.generateQRCode() : <></> }\n          </>\n        }\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport 'materialize-css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}